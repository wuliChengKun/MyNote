
Spring AOP:

Spring 的核心可以简单理解为：Ioc或DI + AOP

OOP：面向对象的编程。Modularity模块化
AOP：面向切面的编程。

AOP的全称Aspect-Oriented Programming。在特定时间上切入。是OOP的补充，补充，补充！

AOP可用在事务、日志、权限、异常等方面。

切面：Aspect封装的用于横向插入系统功能的类。
连接点：Joinpoint在程序执行过程中的某个阶段点。
切入点：Pointcut切面与程序流程的交叉点，即那些需要处理的连接点。

Advice：（通知/增强处理）AOP框架在特定的切入点执行的增强处理，即在定义好的切入点处所要执行的程序代码。可以将其理解为切面类中的方法。
TargetObject：（目标对象）指所有被通知的对象，也被称为被增强的对象。如果AOP框架采用的是动态的AOP实现，那么该对象就是一个被代理的对象。
Proxy：（代理）将通知应用到目标对象之后，被动态创建的对象。
Weaving：（织入）将切面代码插入到目标对象上，从而生成代理对象的过程。


Spring AOP的两种实现方式：
  静态代理AspectJ，所谓静态是因为AOP框架会在编译时生成AOP代理类，因此也成为编译时增强。
  动态代理：
  1、JDK动态代理（依赖接口）
  2、CGLib动态代理（不依赖接口）
Spring支持AspectJ的继承。

Interceptor：拦截器
Enhancer：增强器


基于注解的声明式AspectJ
@Aspect
@PointCut
@Before
@AfterReturning
@Around
@AfterThrowing
@After

  
  
  
  
  
  
  
  
  
  
  
  



